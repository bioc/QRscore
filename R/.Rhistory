#'
#' # Two-sample example with significant zero inflation and variance shift
#' mochisZINB(x = countreg::rzinbinom(30, size = 4, mu = 20, pi = 0.1),
#'            y = countreg::rzinbinom(30, size = 1, mu = 20, pi = 0.3),
#'            zero_inflation = TRUE, LR.test = FALSE, alternative = "two.sided",
#'            approx = "resample", resamp_num = 50000, measure = "dispersion")
#'
mochisZINB <- function(x, y, zero_inflation = TRUE, LR.test = FALSE, approx = "resample",
alternative = "two.sided", resamp_num = 20000, pi_threshold = 0.95, gene.name = NULL,
measure = "mean", p_value = TRUE, seed = 1) {
if (sum(round(x) != x) > 0 | sum(round(y) != y) > 0) {
warning("Input values are not integers. Automatically rounding the input.")
x <- round(x)
y <- round(y)
}
assertthat::assert_that(!is.null(y), msg = "Please provide a non-null value for y.")
assertthat::assert_that(all(x >= 0) & all(y >= 0), msg = "Input contains negative values, which are not allowed.")
combined <- c(x, y)
n <- length(y)
k <- length(x)
alpha = k/(n + k)
# Decide which weight function to use based on the 'measure' parameter
computeweight <- ifelse(measure == "dispersion", computeweight_disp, computeweight_mean)
if (sum(combined == 0) == 0 || !zero_inflation) {
message(date(), ": Estimating negative binomial parameters.")
fitNB = MASS::glm.nb(combined ~ 1)
beta = min(fitNB$theta, 100)  # Set a lower bound for dispersion estimation.
mu = exp(fitNB$coefficients["(Intercept)"])
pi = 0
} else {
message(date(), ": Estimating zero inflated negative binomial parameters.")
fitZINB <- pscl::zeroinfl(combined ~ 1 | 1, dist = "negbin")
beta = min(fitZINB$theta, 100)
mu = exp(fitZINB$coef$count[1])
pi = exp(fitZINB$coef$zero[1])
if (LR.test) {
message(date(), ": Applying likelihood ratio test to choose model.")
fitNB <- MASS::glm.nb(combined ~ 1)
lrt_pvalue = pchisq(2 * (logLik(fitZINB) - logLik(fitNB)), df = 1, lower.tail = FALSE)
# If the LRT supports the NB model, update the parameters
if (lrt_pvalue >= 0.05) {
beta = min(fitNB$theta, 100)
mu = exp(fitNB$coefficients["(Intercept)"])
pi = 0
}
}
if (pi > pi_threshold) {
if(is.null(gene.name)){
warning(paste0("The estimated probability of zeros is greater than ", pi_threshold, ", returning NA."))
}else{
warning(paste0("The estimated probability of zeros for gene ", gene.name," is greater than ", pi_threshold, ", returning NA."))
}
return(NA)
}
}
results <- computeweight(beta, mu, pi, n, k)
if (!p_value) {
return(results)
}
weights = results$weight
est_var = alpha*(1-alpha)*results$var
if (approx != "resample" | (n >= 100 & k >= 50)) {
zscore = k / sqrt(n + k) * mean(weights[rank_x(x, y)])
p.norm = pnorm(zscore, mean = 0, sd = sqrt(est_var))
if (alternative == "two.sided") {
p.value = 2 * min(p.norm, 1 - p.norm)
} else if (alternative == "greater") { # "greater" in dispersion detection means greater size parameter!!
p.value = 1 - p.norm
} else {
p.value = p.norm
}
} else{
message(date(),
": Using resampling approach, with resampling number ",
resamp_num,", to approximate p-value...")
set.seed(seed)
zscore = mean(weights[rank_x(x, y)])
null_zscore = c()
for (num in 1:resamp_num) {
null_zscore[num] = mean(weights[sample(1:(n + k), k)])
}
p.permute = sum(null_zscore < zscore) / resamp_num
if (alternative == "two.sided") {
p.value = 2 * min(p.permute, 1 - p.permute)
} else if (alternative == "greater") {
p.value = 1 - p.permute
} else {
p.value = p.permute
}
}
return(p.value)
}
# Two-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(120, size = 2, mu = 20, pi = 0)
group2 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0) # Different mean
data <- c(group1, group2)
labels <- c(rep("Group1", 120), rep("Group2", 100))
mochis.test(samples = data, labels = labels, approx = "asymptotic", measure = "mean", zero_inflation = FALSE)
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(120, size = 2, mu = 30, pi = 0.1)
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(120, size = 2, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(100, size = 3, mu = 30, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 120), rep("Group2", 120))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
sum(round(group1) != group1) > 0
sum(round(group2) != group2) > 0
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(120, size = 2, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(100, size = 3, mu = 30, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 120), rep("Group2", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(120, size = 2, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(100, size = 4, mu = 30, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 120), rep("Group2", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(120, size = 4, mu = 30, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 120), rep("Group2", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(120, size = 4, mu = 30, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 120))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
mochis.test <- function(samples, labels = NULL,
p = NULL, wList = NULL,
alternative = "two.sided", approx = "resample", type = "unbiased",
n_mom = 100, resamp_number = 5000,
zero_inflation = TRUE, LR.test = FALSE, pi_threshold = 0.95,
gene.name = NULL, measure = "mean", perturb = TRUE,
force_discrete = FALSE, python_backend = FALSE,
use_base_r = TRUE, seed = 1) {
assertthat::assert_that(!is.null(samples), msg = "Samples cannot be NULL.")
assertthat::assert_that((alternative == "two.sided" | alternative == "greater" | alternative == "less"),
msg = "Please specify a valid alternative (`two.sided`, `greater`, or `less`)")
assertthat::assert_that((approx == "resample" | approx == "asymptotic"),
msg = "Please specify a valid approximation (`resample`, `asymptotic`)")
assertthat::assert_that((type == "unbiased" | type == "valid" | type == "both"),
msg = "Please specify a valid type (`unbiased`, `valid`, or `both`)")
if (is.null(labels) || length(unique(labels)) == 1) {
message(date(), ": Performing a one-sample test.")
assertthat::assert_that(!is.null(p), msg = "Exponent p must be provided for the one-sample test.")
assertthat::assert_that(!is.null(wList), msg = "wList must be provided for one-sample test.")
assertthat::assert_that(length(samples) == length(wList), msg = "Length of wList must be same as length of the sample.")
assertthat::assert_that(p > 0 & (abs(p - round(p)) < .Machine$double.eps^0.5),
msg = "Currently only supporting positive integer values of p. Check that p is a positive integer.")
assertthat::assert_that((approx == "resample"),
msg = "Currently only supporting `resample`.")
return(mochisR(samples,NULL, p, wList, alternative, approx, type, n_mom, resamp_number, force_discrete))
}
assertthat::assert_that(length(labels)==length(samples), msg = "Sample length should be the same as label length")
unique_labels <- unique(labels)
n_groups <- length(unique_labels)
sample_list <- lapply(unique_labels, function(l) samples[labels == l])
if (n_groups == 2) {
x <- sample_list[[1]]
y <- sample_list[[2]]
x_label <- unique_labels[1]
y_label <- unique_labels[2]
if (length(x) > length(y)) {
x <- sample_list[[2]]
y <- sample_list[[1]]
x_label <- unique_labels[2]
y_label <- unique_labels[1]
}
message(date(), ": Performing a two-sample test. Group '", x_label,
"' is x and Group '", y_label, "' is y.")
if(is.null(wList) || is.null(p)){
message(date(), ": Use ZINB or NB model to estimate the weights since p and wList are not specified.")
assertthat::assert_that(all(samples >= 0), msg = "Samples must not contain negative values.")
return(mochisZINB(x, y, zero_inflation, LR.test, approx, alternative, resamp_number,
pi_threshold, gene.name, measure, seed))
} else{
assertthat::assert_that(length(x) + 1 == length(wList), msg = "Length of wList must be one more than length of sample x.")
assertthat::assert_that(p > 0 & (abs(p - round(p)) < .Machine$double.eps^0.5),
msg = "Currently only supporting positive integer values of p. Check that p is a positive integer.")
assertthat::assert_that((approx == "resample"),
msg = "Currently only supporting `resample`.")
# edge case
if (identical(wList,(length(x):0)) & p == 1 & use_base_r) {
message(date(), ": Settings correspond to Mann-Whitney, using base R...")
return(wilcox.test(x, y, alternative = alternative, correct=FALSE)$p.value)
} else {
# all other cases
if (python_backend) {
message(date(), ": Python calling is currently not supported. Please set python_backend to FALSE.")
return(-99)
} else {
message(date(), ": Using native R to compute p-value...")
return(mochisR(x, y, p, wList, alternative, approx, type, n_mom, resamp_number, force_discrete))
}
}
}
} else if (n_groups > 2) {
message(date(), ": Performing a multi-sample test.")
message(date(), ": Use ZINB or NB model to estimate the weights.")
return(mochisZINB_nSamples(samples, labels, zero_inflation, LR.test, approx,
resamp_number, pi_threshold, gene.name, measure, perturb, seed))
}
}
set.seed(1)
# One-sample test example with normally distributed data
data <- rnorm(150, mean = 20, sd = 5)
labels <- rep(1, 150)  # All from one group
mochis.test(samples = data, labels = labels, p = 2, wList = rep(1, 150), alternative = "two.sided", approx = "resample")
# Two-sample test with specified weights using normally distributed data
group1 <- rnorm(120, sd = 1)
group2 <- rnorm(120, sd = 2) # Different mean
data <- c(group1, group2)
labels <- c(rep("Group1", 120), rep("Group2", 120))
mochis.test(samples = data, labels = labels, p = 1, wList = c(60:0,1:60), alternative = "two.sided", approx = "resample")
# Two-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(120, size = 2, mu = 20, pi = 0)
group2 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0) # Different mean
data <- c(group1, group2)
labels <- c(rep("Group1", 120), rep("Group2", 100))
mochis.test(samples = data, labels = labels, approx = "asymptotic", measure = "mean", zero_inflation = FALSE)
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0.1)
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(120, size = 4, mu = 40, pi = 0.1) # Different size and zero-inflation
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(200, size = 4, mu = 40, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 120))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(200, size = 4, mu = 40, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 200))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(200, size = 3, mu = 40, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 200))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(200, size = 3, mu = 40, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 200))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 3, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(200, size = 2, mu = 40, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 200))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- rnbinom(100, size = 2, mu = 20)
group2 <- rnbinom(100, size = 2, mu = 25)
group3 <- rnbinom(100, size = 2, mu = 30)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 100), rep("Group2", 100), rep("Group3", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "resample")
mochisZINB_nSamples <- function(samples, labels, zero_inflation = T, LR.test = F, approx = "resample", resamp_num = 20000, pi_threshold = 0.95, gene.name = NULL, measure = "mean", perturb = TRUE, seed = 1) {
unique_labels <- unique(labels)
n_groups <- length(unique_labels)
sample_list <- lapply(unique_labels, function(l) samples[labels == l])
group_sizes <- sapply(sample_list, length)
N_all <- sum(group_sizes)
generateBMatrix <- function(d) {
vectors <- matrix(0, nrow = d-1, ncol = d) # Initialize matrix with zeros
for (k in 1:(d-1)) {
vector <- rep(0, d) # Start with a vector of zeros
vector[1:k] <- 1 # Set the first k elements to 1
vector[k+1] <- -k # Set the (k+1)th element to -k
norm_factor <- sqrt(sum(vector^2)) # Calculate the normalization factor
vectors[k, ] <- vector / norm_factor # Assign the normalized vector to the matrix
}
return(t(vectors))
}
B_matrix <- generateBMatrix(n_groups)
#print(B_matrix)
# Prepare AA_matrix
group_proportion <- group_sizes / N_all
AA_matrix <- matrix(NA, n_groups, n_groups)
for (i in 1:n_groups) {
for (j in 1:n_groups) {
if (i == j) {
AA_matrix[i,j] <- 1 - group_proportion[i]
} else {
AA_matrix[i,j] <- -sqrt(group_proportion[i] * group_proportion[j])
}
}
}
#print(AA_matrix)
# Weight calculation
x = sample_list[[1]]
y = unlist(sample_list[-i], use.names = FALSE)
results = mochisZINB(x,y,zero_inflation = zero_inflation,LR.test = LR.test, approx = approx, resamp_num = resamp_num, pi_threshold = pi_threshold, gene.name = gene.name,measure = measure,p_value = FALSE,seed = seed)
# S scores calculation
S_scores <- numeric(n_groups)
for (i in 1:n_groups) {
# Extract the current group 'x' and other groups 'y'
x <- sample_list[[i]]
y <- unlist(sample_list[-i], use.names = FALSE)
if(!is.list(results) || is.null(results$weight)) {
S_scores[i] <- NA
} else {
ranked_indices <- rank_x(x, y)
S_scores[i] <- sum(results$weight[ranked_indices]) / sqrt(N_all)
}
}
Lambda_matrix <- diag(1/sqrt(group_proportion))
Test_vec <- t(B_matrix) %*% Lambda_matrix %*% S_scores
# Hessian matrix adjustments
H_w <- results$var
H_modifier <- t(B_matrix) %*% AA_matrix %*% B_matrix
H_modifier <- (H_modifier + t(H_modifier)) / 2
H_new <- H_w * H_modifier
if (isSymmetric(H_new) && all(eigen(H_new)$values > 0)) {
H_inv <- chol2inv(chol(H_new))
} else {
H_inv <- solve(H_new)
}
# Chi-square test
Q_all <- t(Test_vec) %*% H_inv %*% Test_vec
p.value <- 1 - pchisq(Q_all, df = n_groups-1)
return(p.value)
}
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "resample",measure = mean)
# Three-sample test with automatically estimated weights from NB model
group1 <- rnbinom(100, size = 2, mu = 20)
group2 <- rnbinom(100, size = 2, mu = 25)
group3 <- rnbinom(100, size = 2, mu = 30)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 100), rep("Group2", 100), rep("Group3", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "resample",measure = "mean")
mochisZINB_nSamples <- function(samples, labels, zero_inflation = T, LR.test = F, approx = "resample", resamp_num = 20000, pi_threshold = 0.95, gene.name = NULL, measure = "mean", perturb = TRUE, seed = 1) {
unique_labels <- unique(labels)
n_groups <- length(unique_labels)
sample_list <- lapply(unique_labels, function(l) samples[labels == l])
group_sizes <- sapply(sample_list, length)
N_all <- sum(group_sizes)
generateBMatrix <- function(d) {
vectors <- matrix(0, nrow = d-1, ncol = d) # Initialize matrix with zeros
for (k in 1:(d-1)) {
vector <- rep(0, d) # Start with a vector of zeros
vector[1:k] <- 1 # Set the first k elements to 1
vector[k+1] <- -k # Set the (k+1)th element to -k
norm_factor <- sqrt(sum(vector^2)) # Calculate the normalization factor
vectors[k, ] <- vector / norm_factor # Assign the normalized vector to the matrix
}
return(t(vectors))
}
B_matrix <- generateBMatrix(n_groups)
#print(B_matrix)
# Prepare AA_matrix
group_proportion <- group_sizes / N_all
AA_matrix <- matrix(NA, n_groups, n_groups)
for (i in 1:n_groups) {
for (j in 1:n_groups) {
if (i == j) {
AA_matrix[i,j] <- 1 - group_proportion[i]
} else {
AA_matrix[i,j] <- -sqrt(group_proportion[i] * group_proportion[j])
}
}
}
#print(AA_matrix)
# Weight calculation
x = sample_list[[1]]
y = unlist(sample_list[-i], use.names = FALSE)
results = mochisZINB(x,y,zero_inflation = zero_inflation,LR.test = LR.test, approx = approx, resamp_num = resamp_num, pi_threshold = pi_threshold, gene.name = gene.name,measure = measure,p_value = FALSE,seed = seed)
# S scores calculation
S_scores <- numeric(n_groups)
for (i in 1:n_groups) {
# Extract the current group 'x' and other groups 'y'
x <- sample_list[[i]]
y <- unlist(sample_list[-i], use.names = FALSE)
if(!is.list(results) || is.null(results$weight)) {
S_scores[i] <- NA
} else {
ranked_indices <- rank_x(x, y)
S_scores[i] <- sum(results$weight[ranked_indices]) / sqrt(N_all)
}
}
Lambda_matrix <- diag(1/sqrt(group_proportion))
Test_vec <- t(B_matrix) %*% Lambda_matrix %*% S_scores
# Hessian matrix adjustments
H_w <- results$var
H_modifier <- t(B_matrix) %*% AA_matrix %*% B_matrix
H_modifier <- (H_modifier + t(H_modifier)) / 2
H_new <- H_w * H_modifier
if (isSymmetric(H_new) && all(eigen(H_new)$values > 0)) {
H_inv <- chol2inv(chol(H_new))
} else {
H_inv <- solve(H_new)
}
# Chi-square test
Q_all <- t(Test_vec) %*% H_inv %*% Test_vec
p.value <- 1 - pchisq(Q_all, df = n_groups-1)
return(p.value[1,1])
}
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "resample",measure = "mean")
# Three-sample test with automatically estimated weights from NB model
group1 <- rnbinom(100, size = 1, mu = 30)
group2 <- rnbinom(100, size = 2, mu = 30)
group3 <- rnbinom(100, size = 3, mu = 30)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 100), rep("Group2", 100), rep("Group3", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- rnbinom(100, size = 1, mu = 30)
group2 <- rnbinom(100, size = 1, mu = 30)
group3 <- rnbinom(100, size = 3, mu = 30)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 100), rep("Group2", 100), rep("Group3", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- rnbinom(100, size = 1, mu = 30)
group2 <- rnbinom(100, size = 1, mu = 30)
group3 <- rnbinom(100, size = 1, mu = 30)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 100), rep("Group2", 100), rep("Group3", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 3, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(200, size = 2, mu = 40, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 200))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Two-sample test with automatically estimated weights from ZINB model
group1 <- countreg::rzinbinom(100, size = 2, mu = 40, pi = 0.1)
group2 <- countreg::rzinbinom(200, size = 1, mu = 40, pi = 0.1) # Different size and zero-inflation
data <- c(group1, group2)
labels <- c(rep("Group1", 100), rep("Group2", 200))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic", measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- rnbinom(100, size = 1, mu = 30)
group2 <- rnbinom(100, size = 2, mu = 30)
# Three-sample test with automatically estimated weights from NB model
group1 <- rnbinom(100, size = 1, mu = 30, pi = 0.1)
group2 <- rnbinom(100, size = 2, mu = 30, pi = 0.1)
group3 <- rnbinom(100, size = 3, mu = 30, pi = 0.1)
data <- c(group1, group2, group3)
# Three-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(100, size = 1, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0.1)
group3 <- countreg::rzinbinom(100, size = 3, mu = 30, pi = 0.1)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 100), rep("Group2", 100), rep("Group3", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(1000, size = 1, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(1000, size = 2, mu = 30, pi = 0.1)
group3 <- countreg::rzinbinom(1000, size = 3, mu = 30, pi = 0.1)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 100), rep("Group2", 100), rep("Group3", 100))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(1000, size = 1, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(1000, size = 2, mu = 30, pi = 0.1)
group3 <- countreg::rzinbinom(1000, size = 3, mu = 30, pi = 0.1)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 1000), rep("Group2", 1000), rep("Group3", 1000))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(150, size = 1, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0.1)
group3 <- countreg::rzinbinom(50, size = 3, mu = 30, pi = 0.1)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 150), rep("Group2", 100), rep("Group3", 50))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(150, size = 1, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0.1)
group3 <- countreg::rzinbinom(30, size = 3, mu = 30, pi = 0.1)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 150), rep("Group2", 100), rep("Group3", 50))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
# Three-sample test with automatically estimated weights from NB model
group1 <- countreg::rzinbinom(150, size = 1, mu = 30, pi = 0.1)
group2 <- countreg::rzinbinom(100, size = 2, mu = 30, pi = 0.1)
group3 <- countreg::rzinbinom(30, size = 3, mu = 30, pi = 0.1)
data <- c(group1, group2, group3)
labels <- c(rep("Group1", 150), rep("Group2", 100), rep("Group3", 30))
mochis.test(samples = data, labels = labels, alternative = "two.sided", approx = "asymptotic",measure = "dispersion")
mochis.test(samples = data, labels = labels, alternative = "two.sided", measure = "dispersion", approx = "resample")
set.seed(1)
# One-sample test example with normally distributed data
data <- rnorm(150, mean = 20, sd = 5)
labels <- rep(1, 150)  # All from one group
mochis.test(samples = data, labels = labels, p = 2, wList = rep(1, 150), alternative = "two.sided", approx = "resample")
library(hitandrun)
mochis.test(samples = data, labels = labels, p = 2, wList = rep(1, 150), alternative = "two.sided", approx = "resample")
set.seed(1)
# One-sample test example with normally distributed data
data <- rnorm(150, mean = 1, sd = 5)
labels <- rep(1, 150)  # All from one group
mochis.test(samples = data, labels = labels, p = 2, wList = rep(1, 150), alternative = "two.sided", approx = "resample")
mochis.test(x = abs(rnorm(10)), p = 2, wList = rep(1,10), alternative = "two.sided", approx = "resample")
set.seed(1)
# One-sample test example with normally distributed data
data <- abs(rnorm(10))
mochis.test(data, p = 2, wList = rep(1,10), alternative = "two.sided", approx = "resample")
getwd()
library(mochisR)
?mochis.test
